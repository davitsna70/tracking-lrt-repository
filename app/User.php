<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Backpack\Base\app\Notifications\ResetPasswordNotification as ResetPasswordNotification;
use PhpParser\Node\Scalar\String_;


class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token','role',
    ];

    /**
     * Send the password reset notification.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPasswordNotification($token));
    }

    public function activities()
    {
        return $this->hasMany('App\Activity');
    }

    public function user_activities()
    {
        return $this->hasMany('App\UserActivity');
    }

    public function list_to_dos()
    {
        return $this->hasMany('App\ListToDo');
    }

    public function group()
    {
        return $this->belongsTo('App\Group');
    }

    public function log_activities()
    {
        return $this->hasMany('App\LogActivity');
    }

    public function profile()
    {
        return $this->hasOne('App\Profile');
    }

    public function messages()
    {
        return $this->hasMany('App\Message');
    }

    public function tujuan_messages()
    {
        return $this->hasMany('App\Message', 'tujuan', 'id');
    }

    public function hasRole(array $roles)
    {
        if(!in_array($this->role, $roles))
        {
            abort(403, 'Unauthorized action.');
        }
    }

    public function delete()
    {
//        dd($this->profile);
        foreach ($this->activities as $activity) $activity->delete();
        foreach ($this->user_activities as $user_activity) $user_activity->delete();
        foreach ($this->list_to_dos as $list_to_do) $list_to_do->delete();
        foreach ($this->log_activities as $log_activity) $log_activity->delete();
        if ($this->profile!=null)$this->profile->delete();
        foreach ($this->messages as  $message) $message->delete();
        foreach ($this->tujuan_messages as $tujuan_message) $tujuan_message->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }
}
